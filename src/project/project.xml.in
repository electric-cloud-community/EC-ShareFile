<?xml version="1.0" encoding="UTF-8"?>
<exportedData version="69" buildLabel="build_main_89270_2015.04.16_07:48:51" buildVersion="5.4.0.89270" passkey="5988fd40f08f691b7b3605f17301cfc761659b8f">
  <exportPath>/projects/@PLUGIN_KEY@</exportPath>
  <project>
    <projectName>@PLUGIN_KEY@</projectName>
    <description/>
    <resourceName/>
    <tracked>1</tracked>
    <workspaceName/>
    <propertySheet>
      <tracked>1</tracked>
      <property>
        <propertyName>ui_forms</propertyName>
        <tracked>1</tracked>
        <propertySheet>
          <tracked>1</tracked>
          <property>
            <propertyName>createConfigForm</propertyName>
            <counter>0</counter>
            <expandable>1</expandable>
            <tracked>1</tracked>
            <value>&lt;editor&gt;
    &lt;formElement&gt;
        &lt;type&gt;entry&lt;/type&gt;
        &lt;label&gt;Configuration Name:&lt;/label&gt;
        &lt;property&gt;config&lt;/property&gt;
        &lt;value&gt;&lt;/value&gt;
        &lt;required&gt;1&lt;/required&gt;
    &lt;/formElement&gt;
    &lt;formElement&gt;
        &lt;type&gt;credential&lt;/type&gt;
        &lt;label&gt;Login as:&lt;/label&gt;
        &lt;property&gt;credential&lt;/property&gt;
        &lt;value&gt;&lt;/value&gt;
        &lt;required&gt;0&lt;/required&gt;
    &lt;/formElement&gt;
&lt;/editor&gt;</value>
          </property>
          <property>
            <propertyName>editConfigForm</propertyName>
            <counter>0</counter>
            <expandable>1</expandable>
            <tracked>1</tracked>
            <value>&lt;editor&gt;
        &lt;formElement&gt;
        &lt;type&gt;credential&lt;/type&gt;
        &lt;label&gt;Login as:&lt;/label&gt;
        &lt;property&gt;credential&lt;/property&gt;
        &lt;value&gt;&lt;/value&gt;
        &lt;required&gt;0&lt;/required&gt;
    &lt;/formElement&gt;
&lt;/editor&gt;</value>
          </property>
        </propertySheet>
      </property>
      <property>
        <propertyName>configureCredentials</propertyName>
        <counter>0</counter>
        <description/>
        <expandable>1</expandable>
        <tracked>1</tracked>
        <value>1</value>
      </property>
      <property>
        <propertyName>ec_visibility</propertyName>
        <counter>0</counter>
        <expandable>1</expandable>
        <tracked>1</tracked>
        <value>pickListOnly</value>
      </property>
      <property>
        <propertyName>help</propertyName>
        <counter>0</counter>
        <description>The help page for the EC-ShareFile plugin</description>
        <expandable>1</expandable>
        <tracked>1</tracked>
        <value>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;

&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head&gt;
    &lt;meta content="text/html; charset=us-ascii" http-equiv="content-type" /&gt;
    &lt;title&gt;EC-ShareFile Plugin&lt;/title&gt;
    &lt;link rel="stylesheet" href= "../../plugins/@PLUGIN_NAME@/pluginhelp.css" type="text/css" media= "screen" /&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;div class="help"&gt;
        &lt;h1&gt;EC-ShareFile&lt;/h1&gt;
		&lt;p&gt;Plugin Version @PLUGIN_VERSION@&lt;/p&gt;
        &lt;hr style="margin-left: -10px; margin-top: 10px; height: 1px; width: 100%; color: #5981BD;" noshade="noshade" /&gt;

        &lt;p&gt;EC-ShareFile is a collection of procedures to help you
interact with Citrix ShareFile. &lt;/br&gt;
		&lt;b&gt;Note:this plugin was part of the bundle who helped Laurent Rochette and Nikhil Vaze won "Best in Show" at the Citrix Synergy 2015 conference.&lt;/b&gt; 
		&lt;/p&gt;

		&lt;h2&gt;ElectricFlow Integration to Citrix ShareFile&lt;/h2&gt;

		&lt;p&gt;The plugin interacts with the ShareFile REST API.&lt;/p&gt;

		&lt;h1&gt;Plugin Procedures&lt;/h1&gt;

	    &lt;p&gt;
	        IMPORTANT: For all parameter descriptions below, required
	        parameters are shown in &lt;span class="required"&gt;bold
	        italics&lt;/span&gt;.
	    &lt;/p&gt;

	    &lt;div id="CreateConfiguration"&gt;&lt;a name="CreateConfiguration" id="CreateConfiguration"&gt;&lt;/a&gt;
    
    	&lt;h2&gt;Plugin Configuration&lt;/h2&gt;

        &lt;p&gt;
        Plugin configurations are sets of parameters that apply
        across some or all of the plugin's procedures. They are
        intended to reduce repetition of common values, create
        predefined sets of parameters for end users, and to
        securely store credentials where needed. Each configuration
        is given a unique name that is entered in designated
        parameters on procedures that use them.&lt;br /&gt;
         Plugin configurations are created by going to the Electric
        Commander "Administration" tab, then to the "Plugins"
        sub-tab. On the right side of the line for the specific
        plugin, there is a "Configure" link which will open the
        Configuration page.
    	&lt;/p&gt;

	    &lt;table class="grid"&gt;
	        &lt;thead&gt;
	            &lt;tr&gt;
	                &lt;th&gt;Parameter&lt;/th&gt;

	                &lt;th&gt;Description&lt;/th&gt;
	            &lt;/tr&gt;
	        &lt;/thead&gt;

	        &lt;tbody&gt;
	            &lt;tr&gt;
	                &lt;td class="required"&gt;Configuration Name&lt;/td&gt;
	                &lt;td&gt;Provide a unique name for the configuration.
	                (Required)&lt;/td&gt;
	            &lt;/tr&gt;
	            &lt;tr&gt;
	                &lt;td class="required"&gt;User Name&lt;/td&gt;
	                &lt;td&gt;Provide the user login ID. Remember that login
	                IDs are case sensitive. (Required)&lt;/td&gt;
	            &lt;/tr&gt;
	            &lt;tr&gt;
	                &lt;td class="required"&gt;Password&lt;/td&gt;
	                &lt;td&gt;Provide the user-specified password.
	                (Required)&lt;/td&gt;
	            &lt;/tr&gt;
	        &lt;/tbody&gt;
    	&lt;/table&gt;
    	&lt;img src="../../plugins/@PLUGIN_KEY@/images/help/configuration.png" alt="form" border="1"/&gt;&lt;/div&gt;

    	&lt;h2&gt;createFolderAndUploadFile&lt;/h2&gt;

    	&lt;p&gt;This procedure is used to upload a bundle of file to your ShareFile directory. 
    		It is called
    	automatically by &lt;a href="/commander/pages/EC-Support/help"&gt;EC-Support&lt;/a&gt; 
    	plugins and is not designed to be used directly but nothing prevents 
    	you to encapsulate it in your own process if you so desire.&lt;/p&gt;

	&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</value>
      </property>
      <property>
        <propertyName>pluginBuildNumber</propertyName>
        <counter>0</counter>
        <expandable>1</expandable>
        <tracked>1</tracked>
        <value>23</value>
      </property>
      <property>
        <propertyName>preamble</propertyName>
        <counter>0</counter>
        <description/>
        <expandable>1</expandable>
        <tracked>1</tracked>
        <value>import java.net.*;
import java.util.*;
import java.io.*;
import org.json.simple.*;
import org.json.simple.parser.*;
import groovyx.net.http.RESTClient;
@Grab(group='com.googlecode.json-simple', module='json-simple', version='1.1')
@Grab(group='org.codehaus.groovy.modules.http-builder', module='http-builder', version='0.7.2' )


/**
 * Copyright (c) 2013 Citrix Systems, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation 
 * the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the 
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in 
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

/**
 * Methods in this class make use of ShareFile API. Please see api.sharefile.com for more information.
 *
 * Requirements:
 *
 * JSON.simple jar in your CLASSPATH. see http://code.google.com/p/json-simple/
 *
 * tested with Java 1.7 and json-simple-1.1.1.jar
 *
 * Optional parameters can be passed to functions as a HashMap as follows:
 *
 * ex:
 *
 * HashMap&lt;String, Object&gt; optionalParameters = new HashMap&lt;String, Object&gt;();
 * optionalParameters.put("company", "ACompany");
 * optionalParameters.put("password", "apassword");
 * optionalParameters.put("addshared", true);
 * sample.usersCreate("firstname", "lastname", "an@email.address", false, optionalParameters);
 *
 * See api.sharefile.com for optional parameter names for each operation.
 */
public class ShareFileSample
{
    String subdomain;
    String tld;
    String authId;

    /**
     * Calls getAuthID to retrieve an authid that will be used for subsequent calls to API.
     *
     * If you normally login to ShareFile at an address like https://mycompany.sharefile.com,
     * then your subdomain is mycompany and your tld is sharefile.com
     *
     * sample.authenticate("mycompany", "sharefile.com", "my@user.name", "mypassword");
     *
     * @param subdomain
     * @param tld
     * @param username
     * @param password
     * @return boolean true if authentication was successful, false otherwise
     * @throws MalformedURLException
     * @throws IOException
     * @throws ParseException
     */
    public boolean authenticate(String subdomain, String tld, String username, String password)
            throws MalformedURLException, IOException, ParseException
    {
        this.subdomain = subdomain;
        this.tld = tld;

        String requestUrl = String.format("https://%s.%s/rest/getAuthID.aspx?fmt=json&amp;username=%s&amp;password=%s",
                subdomain, tld, URLEncoder.encode(username, "UTF-8"), URLEncoder.encode(password, "UTF-8"));


        JSONObject jsonObj = this.invokeShareFileOperation(requestUrl);
        boolean error = (boolean) jsonObj.get("error");
        if (!error) {
            String authId = (String) jsonObj.get("value");

            this.authId = authId;
            return(true);
        }
        else {
            long errorCode = (long) jsonObj.get("errorCode");
            String errorMessage = (String) jsonObj.get("errorMessage");
            System.out.println(errorCode + " : " + errorMessage);
            return(false);
        }
    }

    /**
     * Prints out a folder list for the specified path or root if none is provided.
     *
     * Currently prints out id, filename, creationdate, type.
     *
     * @param path folder to list
     * @throws MalformedURLException
     * @throws IOException
     * @throws ParseException
     */
    public void folderList(String path)
            throws MalformedURLException, IOException, ParseException
    {
        if (path.isEmpty()) {
            path = "/";
        }

        HashMap&lt;String, Object&gt; requiredParameters = new HashMap&lt;String, Object&gt;();
        requiredParameters.put("path", path);

        String url = this.buildUrl("folder", "list", requiredParameters);
        System.out.println(url);

        JSONObject jsonObj = this.invokeShareFileOperation(url);
        boolean error = (boolean) jsonObj.get("error");
        if (!error) {
            JSONArray items = (JSONArray) jsonObj.get("value");
            if (items.isEmpty()) {
                System.out.println("No 	Results");
            }
            Iterator&lt;?&gt; iterItems = items.iterator();
            while (iterItems.hasNext()) {
                JSONObject item = (JSONObject) iterItems.next();
                System.out.println(item.get("id")+" "+item.get("filename")+" "+item.get("creationdate")+" "+item.get("type"));
            }
        }
        else {
            long errorCode = (long) jsonObj.get("errorCode");
            String errorMessage = (String) jsonObj.get("errorMessage");
            System.out.println(errorCode + " : " + errorMessage);
        }
    }

    /**
     * Prints out a folder list for the specified path or root if none is provided.
     *
     * Currently prints out id, filename, creationdate, type.
     *
     * @param path folder to list
     * @throws MalformedURLException
     * @throws IOException
     * @throws ParseException
     */
    public String folderCreate(String folderName, String path)
            throws MalformedURLException, IOException, ParseException
    {
        if (path.isEmpty()) {
            path = "/";
        }

        HashMap&lt;String, Object&gt; requiredParameters = new HashMap&lt;String, Object&gt;();
        requiredParameters.put("path", path);
        requiredParameters.put("name", folderName);

        String url = this.buildUrl("folder", "create", requiredParameters);
        System.out.println("Creating folder...");

        JSONObject jsonObj = this.invokeShareFileOperation(url);
        boolean error = (boolean) jsonObj.get("error");
        if (!error) {
            String value = jsonObj.get("value");
            return value;
        }
        else {
            long errorCode = (long) jsonObj.get("errorCode");
            String errorMessage = (String) jsonObj.get("errorMessage");
            System.out.println(errorCode + " : " + errorMessage);
        }

        return ""
    }

    /**
     * Uploads a file to ShareFile.
     *
     * @param localPath full path to local file like "c:\\path\\to\\file.txt"
     * @param optionalParameters HashMap of optional parameter names/values
     * @throws MalformedURLException
     * @throws IOException
     * @throws ParseException
     */
    public void fileUpload(String localPath, HashMap&lt;String, Object&gt; optionalParameters)
            throws MalformedURLException, IOException, ParseException
    {
        HashMap&lt;String, Object&gt; requiredParameters = new HashMap&lt;String, Object&gt;();
        requiredParameters.put("filename", new File(localPath).getName());

        String url = this.buildUrl("file", "upload", requiredParameters, optionalParameters);
        System.out.println("Uploading file...");

        JSONObject jsonObj = this.invokeShareFileOperation(url);
        boolean error = (boolean) jsonObj.get("error");
        if (!error) {
            String uploadUrl = (String)jsonObj.get("value");

            this.multipartUploadFile(localPath, uploadUrl);
        }
        else {
            long errorCode = (long) jsonObj.get("errorCode");
            String errorMessage = (String) jsonObj.get("errorMessage");
            System.out.println(errorCode + " : " + errorMessage);
        }

    }

    /**
     * Downloads a file from ShareFile.
     *
     * @param fileId id of the file to download
     * @param localPath complete path to download file to including filename
     * @throws MalformedURLException
     * @throws IOException
     * @throws ParseException
     */
    public void fileDownload(String fileId, String localPath)
            throws MalformedURLException, IOException, ParseException
    {
        HashMap&lt;String, Object&gt; requiredParameters = new HashMap&lt;String, Object&gt;();
        requiredParameters.put("id", fileId);

        String url = this.buildUrl("file", "download", requiredParameters);
        System.out.println(url);

        JSONObject jsonObj = this.invokeShareFileOperation(url);
        boolean error = (boolean) jsonObj.get("error");
        if (!error) {
            String downloadUrl = (String)jsonObj.get("value");
            System.out.println("downloadUrl = "+downloadUrl);

            BufferedInputStream source = null;
            FileOutputStream target = null;
            try {
                source = new BufferedInputStream(new URL(downloadUrl).openStream());
                target = new FileOutputStream(localPath);

                byte[] chunk = new byte[8192];
                int len;
                while ((len = source.read(chunk, 0, 8192)) != -1)
                {
                    target.write(chunk, 0, len);
                }
                System.out.println("Download complete.");
            }
            catch(IOException ioe){
                ioe.printStackTrace();
            }
            finally {
                source.close();
                target.close();
            }
        }
        else {
            long errorCode = (long) jsonObj.get("errorCode");
            String errorMessage = (String) jsonObj.get("errorMessage");
            System.out.println(errorCode + " : " + errorMessage);
        }

    }

    /**
     * Sends a Send a File email.
     *
     * @param path path to file in ShareFile to send
     * @param to email address to send to
     * @param subject email subject
     * @param optionalParameters HashMap of optional parameter names/values
     * @throws MalformedURLException
     * @throws IOException
     * @throws ParseException
     */
    public void fileSend(String path, String to, String subject, HashMap&lt;String, Object&gt; optionalParameters)
            throws MalformedURLException, IOException, ParseException
    {
        HashMap&lt;String, Object&gt; requiredParameters = new HashMap&lt;String, Object&gt;();
        requiredParameters.put("path", path);
        requiredParameters.put("to", to);
        requiredParameters.put("subject", subject);

        String url = this.buildUrl("file", "send", requiredParameters, optionalParameters);
        System.out.println(url);

        JSONObject jsonObj = this.invokeShareFileOperation(url);
        boolean error = (boolean) jsonObj.get("error");
        if (!error) {
            System.out.println(jsonObj.get("value"));
        }
        else {
            long errorCode = (long) jsonObj.get("errorCode");
            String errorMessage = (String) jsonObj.get("errorMessage");
            System.out.println(errorCode + " : " + errorMessage);
        }
    }

    /**
     * Creates a client or employee user in ShareFile.
     *
     * @param firstName
     * @param lastName
     * @param email
     * @param isEmployee true to create an employee, false to create a client
     * @param optionalParameters HashMap of optional parameter names/values
     * @throws MalformedURLException
     * @throws IOException
     * @throws ParseException
     */
    public void usersCreate(String firstName, String lastName, String email, Boolean isEmployee, HashMap&lt;String, Object&gt; optionalParameters)
            throws MalformedURLException, IOException, ParseException
    {
        HashMap&lt;String, Object&gt; requiredParameters = new HashMap&lt;String, Object&gt;();
        requiredParameters.put("firstname", firstName);
        requiredParameters.put("lastname", lastName);
        requiredParameters.put("email", email);
        requiredParameters.put("isemployee", isEmployee);

        String url = this.buildUrl("users", "create", requiredParameters, optionalParameters);
        System.out.println(url);

        JSONObject jsonObj = this.invokeShareFileOperation(url);
        boolean error = (boolean) jsonObj.get("error");
        if (!error) {
            System.out.println(jsonObj.get("value"));
        }
        else {
            long errorCode = (long) jsonObj.get("errorCode");
            String errorMessage = (String) jsonObj.get("errorMessage");
            System.out.println(errorCode + " : " + errorMessage);
        }
    }

    /**
     * Creates a distribution group in ShareFile.
     *
     * Ex: to create a group and add users to it at the same time
     *
     * optionalParameters.put("isshared", true);
     * optionalParameters.put("contacts", "an@email.address,another@email.address");
     * sample.groupCreate("MyGroupName", optionalParameters);
     *
     * @param name
     * @param optionalParameters HashMap of optional parameter names/values
     * @throws MalformedURLException
     * @throws IOException
     * @throws ParseException
     */
    public void groupCreate(String name, HashMap&lt;String, Object&gt; optionalParameters)
            throws MalformedURLException, IOException, ParseException
    {
        HashMap&lt;String, Object&gt; requiredParameters = new HashMap&lt;String, Object&gt;();
        requiredParameters.put("name", name);

        String url = this.buildUrl("group", "create", requiredParameters, optionalParameters);
        System.out.println(url);

        JSONObject jsonObj = this.invokeShareFileOperation(url);
        boolean error = (boolean) jsonObj.get("error");
        if (!error) {
            System.out.println(jsonObj.get("value"));
        }
        else {
            long errorCode = (long) jsonObj.get("errorCode");
            String errorMessage = (String) jsonObj.get("errorMessage");
            System.out.println(errorCode + " : " + errorMessage);
        }
    }

    /**
     * Searches for items in ShareFile.
     *
     * @param query
     * @param optionalParameters HashMap of optional parameter names/values
     * @throws MalformedURLException
     * @throws IOException
     * @throws ParseException
     */
    public void search(String query, HashMap&lt;String, Object&gt; optionalParameters)
            throws MalformedURLException, IOException, ParseException
    {
        HashMap&lt;String, Object&gt; requiredParameters = new HashMap&lt;String, Object&gt;();
        requiredParameters.put("query", query);

        String url = this.buildUrl("search", "search", requiredParameters, optionalParameters);
        System.out.println(url);

        JSONObject jsonObj = this.invokeShareFileOperation(url);
        boolean error = (boolean) jsonObj.get("error");
        if (!error) {
            JSONArray items = (JSONArray) jsonObj.get("value");
            if (items.isEmpty()) {
                System.out.println("No Results");
            }
            Iterator&lt;?&gt; iterItems = items.iterator();
            String path = "";
            while (iterItems.hasNext()) {
                JSONObject item = (JSONObject) iterItems.next();
                path = "/";
                if(item.get("parentid").equals("box")) {
                    path = "/File Box";
                }
                else {
                    path = (String)item.get("parentsemanticpath");
                }
                System.out.println(path+"/"+item.get("filename")+" "+item.get("creationdate")+" "+item.get("type"));
            }
        }
        else {
            long errorCode = (long) jsonObj.get("errorCode");
            String errorMessage = (String) jsonObj.get("errorMessage");
            System.out.println(errorCode + " : " + errorMessage);
        }
    }


    /***************************** Helper Operations *****************************/
    private JSONObject invokeShareFileOperation(String requestUrl)
            throws MalformedURLException, IOException, ParseException
    {
        URL url = new URL(requestUrl);
        URLConnection connection = url.openConnection();
        connection.connect();
        InputStream is = connection.getInputStream();

        int read = -1;
        byte[] inbuffer = new byte[4096];
        ByteArrayOutputStream baos = new ByteArrayOutputStream();

        while((read = is.read(inbuffer)) != -1){
            baos.write(inbuffer, 0, read);
        }

        byte [] b = baos.toByteArray();
        is.close();

        JSONParser parser=new JSONParser();
        return ((JSONObject) parser.parse(new String(b)));
    }

    private String buildUrl(String endpoint, String op, HashMap&lt;String, Object&gt; requiredParameters)
    {
        return this.buildUrl(endpoint, op, requiredParameters, new HashMap&lt;String, Object&gt;());
    }

    private String buildUrl(String endpoint, String op, HashMap&lt;String, Object&gt; requiredParameters, HashMap&lt;String, Object&gt; optionalParameters)
    {
        requiredParameters.put("authid", this.authId);
        requiredParameters.put("op", op);
        requiredParameters.put("fmt", "json");
        ArrayList&lt;String&gt; parameters = new ArrayList&lt;String&gt;();
        StringBuilder urlParameters = new StringBuilder();

        try {
            for (Map.Entry&lt;String, Object&gt; entry : requiredParameters.entrySet()) {
                parameters.add(String.format("%s=%s", entry.getKey(), URLEncoder.encode(entry.getValue().toString(), "UTF-8")));
            }
            for (Map.Entry&lt;String, Object&gt; entry : optionalParameters.entrySet()) {
                parameters.add(String.format("%s=%s", entry.getKey(), URLEncoder.encode(entry.getValue().toString(), "UTF-8")));
            }

            String separator = "";

            for(String param : parameters) {
                urlParameters.append(separator);
                urlParameters.append(param);
                separator = "&amp;";
            }
        }
        catch (UnsupportedEncodingException ue) {
            ue.printStackTrace();
        }
        String url = String.format("https://%s.%s/rest/%s.aspx?%s", this.subdomain, this.tld, endpoint, urlParameters);
        return(url);
    }

    private void multipartUploadFile(String localPath, String uploadUrl)
            throws MalformedURLException, IOException
    {
        URL url = new URL(uploadUrl);
        URLConnection connection = url.openConnection();

        String boundary = "--"+UUID.randomUUID().toString();

        connection.setDoOutput(true);
        connection.setRequestProperty("Content-Type", "multipart/form-data; boundary=" + boundary);

        File file = new File(localPath);
        String filename = file.getName();

        InputStream source = new FileInputStream(file);
        OutputStream target = connection.getOutputStream();

        StringBuffer buffer = new StringBuffer();
        buffer.append("--"+boundary+"\r\n");
        buffer.append("Content-Disposition: form-data; name=File1; filename=\""+filename+"\"\r\n");
        String contentType = URLConnection.guessContentTypeFromName(filename);
        if (contentType == null) { contentType = "application/octet-stream"; }
        buffer.append("Content-Type: "+contentType+"\r\n\r\n");

        target.write(buffer.toString().getBytes());

        // read from file, and write to outputstream
        byte[] buf = new byte[1024*1024];
        int len;
        while((len = source.read(buf, 0, buf.length)) &gt;= 0) {
            target.write(buf, 0, len);
        }
        target.flush();

        target.write(("\r\n--"+boundary+"--\r\n").getBytes());

        // get Response
        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
        StringBuffer response = new StringBuffer();
        String line = null;
        while ((line = reader.readLine()) != null) {
            response.append(line).append("\n");
        }
        reader.close();
        System.out.println(response.toString());

        target.close();
        source.close();
    }</value>
      </property>
      <property>
        <propertyName>promoteAction</propertyName>
        <counter>0</counter>
        <description/>
        <expandable>0</expandable>
        <tracked>1</tracked>
        <value># upgrade action
if ($upgradeAction eq "upgrade") {
    my $query = $commander-&gt;newBatch();
    my $newcfg = $query-&gt;getProperty(
        "/plugins/$pluginName/project/plugin_cfgs");
    my $oldcfgs = $query-&gt;getProperty(
        "/plugins/$otherPluginName/project/plugin_cfgs");
	my $creds = $query-&gt;getCredentials("\$[/plugins/$otherPluginName]");

	local $self-&gt;{abortOnError} = 0;
    $query-&gt;submit();

    # if new plugin does not already have cfgs
    if ($query-&gt;findvalue($newcfg,"code") eq "NoSuchProperty") {
        # if old cfg has some cfgs to copy
        if ($query-&gt;findvalue($oldcfgs,"code") ne "NoSuchProperty") {
            $batch-&gt;clone({
                path =&gt; "/plugins/$otherPluginName/project/plugin_cfgs",
                cloneName =&gt; "/plugins/$pluginName/project/plugin_cfgs"
            });
        }
    }
	
	# Copy configuration credentials and attach them to the appropriate steps
    my $nodes = $query-&gt;find($creds);
    if ($nodes) {
        my @nodes = $nodes-&gt;findnodes("credential/credentialName");
        for (@nodes) {
            my $cred = $_-&gt;string_value;

            # Clone the credential
            $batch-&gt;clone({
                path =&gt; "/plugins/$otherPluginName/project/credentials/$cred",
                cloneName =&gt; "/plugins/$pluginName/project/credentials/$cred"
            });

            # Make sure the credential has an ACL entry for the new project principal
            my $xpath = $commander-&gt;getAclEntry("user", "project: $pluginName", {
                projectName =&gt; $otherPluginName,
                credentialName =&gt; $cred
            });
            if ($xpath-&gt;findvalue("//code") eq "NoSuchAclEntry") {
                $batch-&gt;deleteAclEntry("user", "project: $otherPluginName", {
                    projectName =&gt; $pluginName,
                    credentialName =&gt; $cred
                });
                $batch-&gt;createAclEntry("user", "project: $pluginName", {
                    projectName =&gt; $pluginName,
                    credentialName =&gt; $cred,
                    readPrivilege =&gt; "allow",
                    modifyPrivilege =&gt; "allow",
                    executePrivilege =&gt; "allow",
                    changePermissionsPrivilege =&gt; "allow"
                });
            }

# Attach the credential to the appropriate steps
            $batch-&gt;attachCredential("\$[/plugins/$pluginName/project]", $cred, {
                procedureName =&gt; "createFolderAndUploadFile",
                stepName =&gt; "createFolderAndUploadFile"
            });

        }
    }
}
</value>
      </property>
      <property>
        <propertyName>version</propertyName>
        <counter>0</counter>
        <description>Version of the EC-Sharefile project

History:
- version 1.1.1
    + Added help page

- version 1.1.0
    + Added credential configuration management</description>
        <expandable>1</expandable>
        <tracked>1</tracked>
        <value>1.1.1</value>
      </property>
      <property>
        <propertyName>visibility</propertyName>
        <counter>0</counter>
        <expandable>1</expandable>
        <tracked>1</tracked>
        <value>all</value>
      </property>
    <property><propertyName>ec_setup</propertyName><value>PLACEHOLDER</value><expandable>0</expandable></property><property><propertyName>project_version</propertyName><value>@PLUGIN_VERSION@</value></property></propertySheet>
    <procedure>
      <procedureName>createConfiguration</procedureName>
      <description>Created by EC-Admin to manage credential configuration</description>
      <tracked>1</tracked>
      <propertySheet>
        <tracked>1</tracked>
      </propertySheet>
      <formalParameter>
        <formalParameterName>config</formalParameterName>
        <description>Configuration Name</description>
        <expansionDeferred>0</expansionDeferred>
        <required>1</required>
        <tracked>1</tracked>
        <type>entry</type>
      </formalParameter>
      <formalParameter>
        <formalParameterName>credential</formalParameterName>
        <expansionDeferred>0</expansionDeferred>
        <required>0</required>
        <tracked>1</tracked>
        <type>credential</type>
      </formalParameter>
      <step>
        <stepName>CreateConfiguration</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>PLACEHOLDER</command>
        <description>Create a EC-Sharefile configuration</description>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <parallel>0</parallel>
        <postProcessor>postp</postProcessor>
        <releaseMode>none</releaseMode>
        <shell>ec-perl</shell>
        <timeLimit>5</timeLimit>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>1</tracked>
        <propertySheet>
          <tracked>1</tracked>
        </propertySheet>
      </step>
      <step>
        <stepName>createAndAttachCredential</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>PLACEHOLDER</command>
        <condition/>
        <description/>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <logFileName/>
        <parallel>0</parallel>
        <postProcessor/>
        <precondition/>
        <releaseMode>none</releaseMode>
        <resourceName/>
        <shell>ec-perl</shell>
        <timeLimit/>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>1</tracked>
        <workingDirectory/>
        <workspaceName/>
        <propertySheet>
          <tracked>1</tracked>
        </propertySheet>
        <attachedParameters>
          <formalParameterName>credential</formalParameterName>
        </attachedParameters>
      </step>
    </procedure>
    <procedure>
      <procedureName>createFolderAndUploadFile</procedureName>
      <description/>
      <jobNameTemplate/>
      <resourceName/>
      <timeLimit/>
      <timeLimitUnits>minutes</timeLimitUnits>
      <tracked>1</tracked>
      <workspaceName/>
      <propertySheet>
        <tracked>1</tracked>
        <property>
          <propertyName>ec_customEditorData</propertyName>
          <tracked>1</tracked>
          <propertySheet>
            <tracked>1</tracked>
            <property>
              <propertyName>parameters</propertyName>
              <tracked>1</tracked>
              <propertySheet>
                <tracked>1</tracked>
                <property>
                  <propertyName>company</propertyName>
                  <tracked>1</tracked>
                  <propertySheet>
                    <tracked>1</tracked>
                    <property>
                      <propertyName>formType</propertyName>
                      <counter>0</counter>
                      <expandable>1</expandable>
                      <tracked>1</tracked>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
                <property>
                  <propertyName>config</propertyName>
                  <tracked>1</tracked>
                  <propertySheet>
                    <tracked>1</tracked>
                    <property>
                      <propertyName>formType</propertyName>
                      <counter>0</counter>
                      <expandable>1</expandable>
                      <tracked>1</tracked>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
                <property>
                  <propertyName>domain</propertyName>
                  <tracked>1</tracked>
                  <propertySheet>
                    <tracked>1</tracked>
                    <property>
                      <propertyName>formType</propertyName>
                      <counter>0</counter>
                      <expandable>1</expandable>
                      <tracked>1</tracked>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
                <property>
                  <propertyName>emailAddress</propertyName>
                  <tracked>1</tracked>
                  <propertySheet>
                    <tracked>1</tracked>
                    <property>
                      <propertyName>formType</propertyName>
                      <counter>0</counter>
                      <expandable>1</expandable>
                      <tracked>1</tracked>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
                <property>
                  <propertyName>folderToCreate</propertyName>
                  <tracked>1</tracked>
                  <propertySheet>
                    <tracked>1</tracked>
                    <property>
                      <propertyName>formType</propertyName>
                      <counter>0</counter>
                      <expandable>1</expandable>
                      <tracked>1</tracked>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
                <property>
                  <propertyName>path</propertyName>
                  <tracked>1</tracked>
                  <propertySheet>
                    <tracked>1</tracked>
                    <property>
                      <propertyName>formType</propertyName>
                      <counter>0</counter>
                      <expandable>1</expandable>
                      <tracked>1</tracked>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
                <property>
                  <propertyName>pathToFile</propertyName>
                  <tracked>1</tracked>
                  <propertySheet>
                    <tracked>1</tracked>
                    <property>
                      <propertyName>formType</propertyName>
                      <counter>0</counter>
                      <expandable>1</expandable>
                      <tracked>1</tracked>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
              </propertySheet>
            </property>
          </propertySheet>
        </property>
        <property>
          <propertyName>ec_parameterForm</propertyName>
          <counter>0</counter>
          <description/>
          <expandable>1</expandable>
          <tracked>1</tracked>
          <value>PLACEHOLDER</value>
        </property>
        <property>
          <propertyName>exposeToPlugin</propertyName>
          <counter>0</counter>
          <description/>
          <expandable>1</expandable>
          <tracked>1</tracked>
          <value>1</value>
        </property>
      </propertySheet>
      <formalParameter>
        <formalParameterName>company</formalParameterName>
        <defaultValue/>
        <description/>
        <expansionDeferred>0</expansionDeferred>
        <required>1</required>
        <tracked>1</tracked>
        <type>entry</type>
      </formalParameter>
      <formalParameter>
        <formalParameterName>config</formalParameterName>
        <defaultValue>sharefileCredential</defaultValue>
        <description/>
        <expansionDeferred>0</expansionDeferred>
        <required>1</required>
        <tracked>1</tracked>
        <type>entry</type>
      </formalParameter>
      <formalParameter>
        <formalParameterName>folderToCreate</formalParameterName>
        <defaultValue/>
        <description/>
        <expansionDeferred>0</expansionDeferred>
        <required>1</required>
        <tracked>1</tracked>
        <type>entry</type>
      </formalParameter>
      <formalParameter>
        <formalParameterName>pathToFile</formalParameterName>
        <defaultValue/>
        <description/>
        <expansionDeferred>0</expansionDeferred>
        <required>1</required>
        <tracked>1</tracked>
        <type>entry</type>
      </formalParameter>
      <step>
        <stepName>createFolderAndUploadFile</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>PLACEHOLDER</command>
        <condition/>
        <description/>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <logFileName/>
        <parallel>0</parallel>
        <postProcessor>postp</postProcessor>
        <precondition/>
        <releaseMode>none</releaseMode>
        <resourceName/>
        <shell>ec-groovy</shell>
        <timeLimit/>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>1</tracked>
        <workingDirectory/>
        <workspaceName/>
        <propertySheet>
          <tracked>1</tracked>
        </propertySheet>
      </step>
    </procedure>
    <procedure>
      <procedureName>DeleteConfiguration</procedureName>
      <description>Created by EC-Admin to manage credential configuration</description>
      <tracked>1</tracked>
      <propertySheet>
        <tracked>1</tracked>
      </propertySheet>
      <formalParameter>
        <formalParameterName>config</formalParameterName>
        <description>Configuration Name</description>
        <expansionDeferred>0</expansionDeferred>
        <required>1</required>
        <tracked>1</tracked>
        <type>entry</type>
      </formalParameter>
      <step>
        <stepName>DeleteConfiguration</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>PLACEHOLDER</command>
        <description>Delete a EC-ShareFile configuration</description>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <parallel>0</parallel>
        <postProcessor>postp</postProcessor>
        <releaseMode>none</releaseMode>
        <shell>ec-perl</shell>
        <timeLimit>5</timeLimit>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>1</tracked>
        <propertySheet>
          <tracked>1</tracked>
        </propertySheet>
      </step>
    </procedure>
  </project>
</exportedData>
